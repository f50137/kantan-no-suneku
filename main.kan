import "std/io";
import "sdl";
import "std/libc" as std;
import "std/vec";

extern def rand(): i32;

let SCREEN_WIDTH = 700;
let SCREEN_HEIGHT = 700;

let TILE_WIDTH = 50;

def get_game_width(): i32 {
	return SCREEN_WIDTH / TILE_WIDTH;
}

def get_game_height(): i32 {
	return SCREEN_HEIGHT / TILE_WIDTH;
}

def get_max_snake_size(): usize {
	return (get_game_width() * get_game_height()) as usize;
}


type Color_RGBA struct {
	r: u8,
	g: u8,
	b: u8,
	a: u8
}

def make_rect(x: i32, y: i32, w: i32, h: i32): sdl.Rect {
	return sdl.Rect {
		x: x,
		y: y,
		w: w,
		h: h
	};
}

def make_color(r: u8, g: u8, b: u8, a: u8): Color_RGBA {
	return Color_RGBA {
		r: r,
		g: g,
		b: b,
		a: a
	};
}

def get_background_color(): Color_RGBA {
	return make_color(51, 51, 51, 255);
}

def get_head_color(): Color_RGBA {
	return make_color(50, 50, 200, 255);
}

let FPS = 25.0;

def get_frame_length(): f64 {
	return (1000.0 as f64) / (FPS as f64);
}

type Vec2i struct {
	x: i32,
	y: i32
}

type Snake_Part struct {
	pos: Vec2i,
	vel: Vec2i
}

type Game struct {
	snake: vec.Vec,
	end_game: bool,
	apple_pos: Vec2i,
	score: u32
}

def (game: *Game) handle_input(): void {
	let e: sdl.Event = undefined;
	
	let head: *Snake_Part = game.snake.get_ptr(0) as *Snake_Part;
	
	let new_x = head.vel.x;
	let new_y = head.vel.y;

	while e.poll() != 0 {
		if e.common.kind == sdl.EventKind.Quit {
			game.end_game = true;
			break;
		}
		else if e.common.kind == sdl.EventKind.KeyDown {
			let event_key = e.key_event.keysym.scancode;
			if event_key == 80 {        //Left
				new_x = -1;
				new_y = 0;	
			} else if event_key == 79 { //Right
				new_x = 1;
				new_y = 0;
			} else if event_key == 82 { //Up
				new_x = 0;
				new_y = -1;
			} else if event_key == 81 { //Down
				new_x = 0;
				new_y = 1;
			}
		}
	}

	if head.vel.x == 0 || new_x != -head.vel.x {
		head.vel.x = new_x;
	} if head.vel.y == 0 || new_y != -head.vel.y {
		head.vel.y = new_y;
	}
}

def fill_background(renderer: *sdl.Renderer, color: Color_RGBA) {
	renderer.set_draw_color(color.r as i32, color.b as i32, color.g as i32, color.a as i32);
	renderer.clear();
}

def fill_rectangle(renderer: *sdl.Renderer, rectangle: sdl.Rect, color: Color_RGBA) {
	renderer.set_draw_color(color.r as i32, color.b as i32, color.g as i32, color.a as i32);
	renderer.fill_rect(&rectangle);
}

def update_snake_part_pos(game: *Game, snake_index: usize): void {
	let part = game.snake.get_ptr(snake_index) as *Snake_Part;

	part.pos.x += part.vel.x + get_game_width();
	part.pos.x %= get_game_width();

	part.pos.y += part.vel.y + get_game_height();
	part.pos.y %= get_game_height();
}

def update_snake_part_vel(game: *Game, snake_index: usize): void {
	let part = game.snake.get_ptr(snake_index) as *Snake_Part;

	if snake_index >= 1 {
		let pivot_part = game.snake.get_ptr(snake_index - 1) as *Snake_Part;
		part.vel.x = pivot_part.vel.x;
		part.vel.y = pivot_part.vel.y;
		

		let front_part = game.snake.get_ptr(0) as *Snake_Part;
		if part.pos.x == front_part.pos.x &&
			part.pos.y == front_part.pos.y &&
			game.snake.len > 2 {
			game.end_game = true;
		}
	}
}

def (game: *Game) update() {
	
	let head = game.snake.get_ptr(0) as *Snake_Part;

	if head.pos.x == game.apple_pos.x
		&& head.pos.y == game.apple_pos.y {
		if game.snake.len < get_max_snake_size() {
			let end_part = game.snake.get_ptr(game.snake.len - 1) as *Snake_Part;
			let new_part = Snake_Part {
				pos: Vec2i {x: end_part.pos.x, y: end_part.pos.y},
				vel: Vec2i{x: 0, y: 0}
			};

			game.snake.push(&new_part as *void);
		} else {
			game.end_game = true;
		}
		game.apple_pos = Vec2i{
			x: rand() % get_game_width(),
		       	y: rand() % get_game_height()
		};
		game.score += 1;
	} 
	

	for let i = game.snake.len as i32 - 1; i >= 0; i -= 1 {
		update_snake_part_pos(game, i as usize);
	}
	
	for let i = game.snake.len as i32 - 1; i >= 0; i -= 1 {
		update_snake_part_vel(game, i as usize);
	}

}

def draw_snake_part(renderer: *sdl.Renderer, part: *Snake_Part): void {
	fill_rectangle(renderer,
		make_rect(part.pos.x * TILE_WIDTH, part.pos.y * TILE_WIDTH, TILE_WIDTH, TILE_WIDTH),
		get_head_color());
}

def render_game(renderer: *sdl.Renderer, game: *Game) {
	fill_background(renderer, get_background_color());
	


	for let i: usize = 0; i < game.snake.len; i += 1 {
		draw_snake_part(renderer, game.snake.get_ptr(i) as *Snake_Part);
	}

	fill_rectangle(renderer,
		make_rect(game.apple_pos.x * TILE_WIDTH, 
			  game.apple_pos.y * TILE_WIDTH,
			  TILE_WIDTH, TILE_WIDTH),
		make_color(200, 50, 50, 255));
	renderer.present();
}

def create_game(game: *Game): void {
	*game = Game{
		snake: vec.create(sizeof Snake_Part), 
		end_game: false,
		apple_pos: Vec2i {x: rand() % get_game_width(), y: rand() % get_game_height()},
		score: 0
	};
	
	
	let head = Snake_Part{
		pos: Vec2i{x: get_game_width() / 2, y: get_game_height() / 2},
		vel: Vec2i{x: 0, y: 0}
	};
	
	game.snake.push(&head as *void);

}

def (game: *Game) free(): void {
	game.snake.free();
}

def main(): i32 {
	
	if sdl.init(sdl.init_video()) < 0 {
		io.printf("Could not initialize SDL2\n");
		return -1;
	}
	defer sdl.quit();

	let window = sdl.create_window(
		"Kantan no Suneku",
		sdl.window_centered(), sdl.window_centered(),
		SCREEN_WIDTH, SCREEN_HEIGHT,
		sdl.window_shown()	
	);

	if window == null {
		io.printf("Could not initialize window!\n");
		return -1;
	}
	defer window.destroy();

	let renderer = sdl.create_renderer(window, -1, sdl.present_vsync());
	defer renderer.destroy();
	renderer.set_draw_color(0, 0, 0, 255);
	
	let game: Game = undefined;
	create_game(&game);
	defer game.free();

	let last = sdl.now();
	let time_acc: f64 = 0.0;
	while !game.end_game {
		let delta_time = sdl.delta(last);
		last = sdl.now();

		time_acc += delta_time;

		while time_acc > get_frame_length() {
			game.handle_input();
			game.update();
			render_game(renderer, &game);
			time_acc -= get_frame_length();
		}

	}
	
	io.printf("You died! Your score was %u!\n", game.score);

	return 0;
}
